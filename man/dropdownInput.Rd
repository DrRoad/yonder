% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dropdown.R
\name{dropdownInput}
\alias{dropdownInput}
\title{Dropdown input}
\usage{
dropdownInput(id, label, choices, values = choices, disabled = NULL,
  dividers = NULL, direction = "down", ...)
}
\arguments{
\item{id}{A character string specifying the id of the dropdown input.}

\item{label}{A character string specifying the label of the dropdown's button.}

\item{choices}{A character vector specifying the labels of the dropdown menu
items.}

\item{values}{A character vector, list of character strings, vector of values
to coerce to character strings, or list of values to coerce to character
strings specifying the values of the dropdown input's choices, defaults to
\code{choices}.}

\item{disabled}{One or more of \code{values} indicating which dropdown menu items
to disable, defaults to \code{NULL}, in which case all choices are enabled.}

\item{dividers}{One or more of \code{values} indicating which dropdown menu items
are the start of a new section, defaults to \code{NULL}. Divider lines will be
placed above the indicated values separating the dropdown menu items into
sections.}

\item{...}{Additional named arguments passed as HTML attributes to the parent
element.}

\item{dropup}{If \code{TRUE}, the dropdown menu opens upwards instead of
downwards, defaults to \code{FALSE}.}
}
\description{
Dropdown inputs, or dropdown menus, function similar to a set of buttons.
The initial click to open a dropdown menu does not trigger a reactive event,
but a click on one of the dropdown items triggers a reactive event. The
reactive value of a dropdown input is the value of the most recently clicked
dropdown menu item.
}
\examples{
if (interactive()) {
  shinyApp(
    ui = container(
      row(
        col(
          dropdownInput(
            id = "dropdown",
            label = "A dropdown",
            choices = paste("Action", 1:5),
            dividers = "Action 4"
          ) \%>\%
            background("orange")
        ),
        col(
          d4(
            textOutput("value")
          )
        )
      )
    ),
    server = function(input, output) {
      output$value <- renderText({
        input$dropdown
      })
    }
  )
}

if (interactive()) {
  shinyApp(
    ui = container(
      buttonInput("click", "Change dropdown choices"),
      dropdownInput(
        id = "foo",
        label = "A dropdown",
        choices = c("Hello", "World")
      )
    ),
    server = function(input, output) {
      observeEvent(input$click, {
        updateChoices(
          id = "foo",
          Hello = "Hello!"
        )
      })
    }
  )
}

}
