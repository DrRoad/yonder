% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dropdown.R
\name{dropdownInput}
\alias{dropdownInput}
\title{Dropdown input}
\usage{
dropdownInput(id, labels, values = labels, disabled = NULL,
  dividers = NULL, dropup = FALSE, ...)
}
\arguments{
\item{labels}{A character vector specifying the labels of the dropdown menu
choices.}

\item{values}{A character vector specifying the values of the dropdown menu
choices, defaults to \code{values}.}

\item{disabled}{One or more of \code{values} indicating which dropdown menu items
to disable, defaults to \code{NULL}.}

\item{dividers}{One or more of \code{values} indicating which dropdown menu items
are the start of a new section, defaults to \code{NULL}. Divider lines will be
placed above the indicated values separating the dropdown menu items into
sections.}

\item{dropup}{If \code{TRUE}, the dropdown menu extends upwards instead of
downwards, defaults to \code{FALSE}.}

\item{...}{Additional named arguments passed as HTML attributes to the parent
element.}
}
\description{
Dropdown inputs, dropdown menus, function similar to a set of buttons. The
initial dropdown open does not trigger a reactive event, but a subsequent
click on one of the menu choices triggers a reactive event. The value of a
dropdown item may be specified in \code{dropdownItem}, otherwise the default value
is \code{NULL}. The reactive value of the dropdown input is the value of the
clicked dropdown item.
}
\examples{
if (interactive()) {
  shinyApp(
    ui = container(
      row(
        col(
          dropdownInput(
            id = "dropdown",
            labels = paste("Action", 1:5),
            dividers = "Action 4"
          )
        ),
        col(
          display4(
            textOutput("value")
          )
        )
      )
    ),
    server = function(input, output) {
      output$value <- renderText({
        input$dropdown
      })
    }
  )
}

}
