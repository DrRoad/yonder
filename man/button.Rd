% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/button.R
\name{button}
\alias{button}
\alias{updateButton}
\title{Buttons, button groups and toolbars}
\usage{
button(label = NULL, context = "secondary", outline = FALSE,
  block = FALSE, disabled = FALSE, textual = NULL, type = "button", ...)

updateButton(id, count = NULL, context = NULL,
  session = getDefaultReactiveDomain())
}
\arguments{
\item{label}{A character vector or tag elements to use as the button label,
defaults to \code{NULL}.}

\item{context}{Used to specify the visual context of the button, one of
\code{"primary"}, \code{"secondary"}, \code{"success"}, \code{"info"}, \code{"warning"}, \code{"danger"},
or \code{"link"}, defaults to \code{"secondary"}.

Primary buttons are blue, secondary buttons are white and grey, buttons for
success are green, informative buttons are a lighter blue, warning buttons
are yellow, and buttons for danger are red. Specifying \code{"link"} makes the
button render with the appearance of a link.}

\item{outline}{If \code{TRUE}, the button's background is transparent, \code{context}
is preserved, defaults to \code{FALSE}.}

\item{block}{If \code{TRUE}, the button is block-level instead of inline, defaults
to \code{FALSE}.

A block-level element will occupy the entire space of its parent element,
thereby creating a "block."}

\item{disabled}{If \code{TRUE}, the button renders in a disabled state, defaults
to \code{FALSE}.}

\item{textual}{Optional textual input, see \code{\link{text}}, to include as part of
the button, defaults to \code{NULL}. If specified, the value of the button is
the value of the text field.}

\item{...}{Named arguments passed as HTML attributes to the button parent
element.}
}
\description{
Button controls. \code{buttonGroup} and \code{buttonToolbar} are a means of grouping
buttons aesthetically.
}
\details{
When adding a textual component to a button it is recommended to use
placeholder text instead of a label.
}
\examples{

button("Primary", context = "primary")

button("Secondary")

button("Success", context = "success")

button("Info", context = "info", outline = TRUE)

button("\\u2715", context = "warning")

button("Danger!", context = "danger", disable = TRUE)

button(
  id = "search",
  "Go!",
  textual = inputs$text(
    placeholder = "search terms"
  )
)

button(
  "Check date",
  textual = inputs$date()
)

if (interactive()) {
  library(shiny)

  shinyApp(
    ui = container(
      listGroup(
        listItem(
          tags$form(
            class = "form-inline",
          button(
            id = "simple",
            "Simple button"
          )
          ),
          badge = badge(id = "simpleClicks", 0)
        ),
        listItem(
          tags$form(
            class = "form-inline",
          button(
             id = "textual",
             label = "Textual button",
             textual = inputs$text(
               placeholder = "hello, world!"
             )
            )
          ),
          badge = badge(id = "textualClicks", 0)
        ),
        listItem(
          button(
            id = "reset",
            label = "Reset",
            context = "primary"
          )
        )
      )
    ),
    server = function(input, output) {
      output$simpleClicks <- renderBadge(input$simple$count)

      output$textualClicks <- renderBadge(
        value = {
          input$textual$count
        },
        context = {
          if (input$textual$count > 5) {
            "warning"
          } else {
            "default"
          }
        }
      )

      observeEvent(input$reset, ignoreInit = TRUE, {
        updateButton("simple", count = 0)
        updateButton("textual", count = 0)
      })
    }
  )

  shinyApp(
    ui = container(
      inputs$text(id = "value", "A value", placeholder = "enter your value"),
      button(id = "doSubmit", type = "submit")
    ),
    server = function(input, output) {
      observe({
        print(input$value)
      })
    }
  )
}

}
\seealso{
For more about block-level elements please refer to the
\href{https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements}{block-level elements}
MDN reference section.

For more about input groups or buttons with text fields please refer to the
\href{https://v4-alpha.getbootstrap.com/components/input-group/#button-addons}{button addons}
Bootstrap reference section.
}
