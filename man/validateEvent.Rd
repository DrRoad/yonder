% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/validate.R
\name{validateEvent}
\alias{validateEvent}
\title{Validate an input}
\usage{
validateEvent(trigger, handler, priority = 0,
  domain = getDefaultReactiveDomain(), initial = TRUE)
}
\arguments{
\item{trigger}{The input to trigger the validation handler. Unlike
\code{observeEvent} this may not be an event and instead must be a single
reactive input value.}

\item{handler}{An expression or function, may contain reactive values.}

\item{priority}{A numeric value specifying the priority of the validation.
All validations are already highly prioritized, but this may be used
to reorder validations.}
}
\description{
\code{validateEvent} is triggered by an input. A handler function may raise an
error, warning, or return. If an error is raised using the input is marked as
invalid and the reactive input value is frozen. While the value is invalid
and remains frozen it will not trigger observers or reactive expressions.
}
\examples{
if (interactive()) {
  shinyApp(
    ui = container(
      fluid = FALSE,
      textInput(
        id = "text",
        label = "Please enter some text"
      )
    ),
    server = function(input, output) {
      validateEvent(input$text, {
        if (input$text == "") {
          stop("this field is required")
        }
      })
    }
  )
}

}
