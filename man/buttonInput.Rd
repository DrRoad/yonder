% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/button.R
\name{buttonInput}
\alias{buttonInput}
\alias{updateButtonInput}
\alias{validateButtonInput}
\alias{disableButtonInput}
\alias{enableButtonInput}
\alias{resetButtonInput}
\alias{submit}
\title{Button inputs and submit buttons}
\usage{
buttonInput(id, label, context = "secondary", outline = FALSE,
  block = FALSE, ...)

updateButtonInput(id, label, session = getDefaultReactiveDomain())

validateButtonInput(id, state, session = getDefaultReactiveDomain())

disableButtonInput(id, session = getDefaultReactiveDomain())

enableButtonInput(id, session = getDefaultReactiveDomain())

resetButtonInput(id, session = getDefaultReactiveDomain())

submit(label = "Submit", outline = FALSE, block = FALSE, ...)
}
\arguments{
\item{id}{A character string specifying the id of the button input.}

\item{label}{A character string specifying a label for the button input.}

\item{context}{One of \code{"primary"}, \code{"secondary"}, \code{"success"}, \code{"info"},
\code{"warning"}, \code{"danger"}, \code{"light"}, \code{"dark"}, or \code{"link"} specifying the
visual context of the button input, defaults to \code{"secondary"}.}

\item{outline}{If \code{TRUE}, the button's visual context is applied to the
border of the button instead of the background, defaults to \code{FALSE}.}

\item{block}{If \code{TRUE}, the button is block-level instead of inline, defaults
to \code{FALSE}. A block-level element will occupy the entire width of its
parent element, thereby creating a "block."}

\item{...}{Additional named arguments passed as HTML attributes to the parent
element.}

\item{disabled}{If \code{TRUE}, the button renders in a disabled state, defaults
to \code{FALSE}.}
}
\description{
Button inputs and submit buttons. A submit button generated with \code{submit}
will not freeze reactive inputs unlike shiny's \code{submitButton}.
}
\examples{
if (interactive()) {
  shinyApp(
    ui = container(
      row(
        col(
          buttonInput(
            id = "button",
            label = "C-c-c-click me!"
          )
        ),
        col(
          display4(
            textOutput("clicks")
          )
        )
      )
    ),
    server = function(input, output) {
      output$clicks <- renderText({
        input$button
      })
    }
  )
}

if (interactive()) {
  shinyApp(
    ui = container(
      row(
        col(
          buttonInput(
            id = "change",
            label = "Change other button",
            context = "success"
          )
        ),
        col(
          buttonInput(
            id = "button",
            label = "Button",
            outline = TRUE
          )
        ),
        col(
          display4(
            textOutput("value")
          )
        )
      )
    ),
    server = function(input, output) {
      observeEvent(input$change, {
        updateButtonInput(
          id = "button",
          label = paste("Button", input$change)
        )

        resetButtonInput("button")
      })

      output$value <- renderText({
        input$button
      })
    }
  )
}

}
\seealso{
Bootstrap 4 button documentation:
\url{https://getbootstrap.com/docs/4.0/components/buttons/}

Other inputs: \code{\link{checkboxInput}},
  \code{\link{formInput}}, \code{\link{groupInput}},
  \code{\link{radioInput}}, \code{\link{selectInput}},
  \code{\link{textInput}}
}
