% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/alerts.R
\name{alert}
\alias{alert}
\alias{showAlert}
\alias{closeAlert}
\title{Static and actionable alerts}
\usage{
alert(..., title = NULL)

showAlert(alert, duration = 4, action = NULL,
  session = getDefaultReactiveDomain())

closeAlert(..., session = getDefaultReactiveDomain())
}
\arguments{
\item{...}{Character strings specifying the text of the alert or additional
named arguments passed as HTML attributes to the alert element.}

\item{title}{A character string or tag element specifying a heading for the
alert, defaults to \code{NULL}, in which case a title is not added.}

\item{alert}{An alert tag element, typically a call to \code{alert()}.}

\item{duration}{A positive integer or \code{NULL} specifying the duration of the
alert, by default the alert is removed after 4 seconds. If \code{NULL} the
alert is not automatically removed.}

\item{action}{A character string specifying a reactive id. If specified a
button is added to the alert. When this button is clicked a reactive value
is triggered, \code{input[[action]]} is set to \code{TRUE}. When the alert is removed
\code{input[[action]]} is reset to \code{NULL}.}

\item{session}{A reactive context, defaults to \code{\link[=getDefaultReactiveDomain]{getDefaultReactiveDomain()}}.}
}
\description{
Use \code{showAlert} to let the user know of successes or to call attention to
problems. While alerts are static by default they can also be made
actionable. Actionable alerts can be used for undoing or redoing an action
and more.
}
\section{Displaying an alert}{
\preformatted{ui <- container(
  buttonInput("show", "Alert!") \%>\%
    margin(3)
)

server <- function(input, output) {
  observeEvent(input$show, {
    color <- sample(c("teal", "red", "orange", "blue"), 1)

    showAlert(
      alert("Alert") \%>\% background(color)
    )
  })
}

shinyApp(ui, server)
}
}

\section{Reacting to alerts}{
\preformatted{ui <- container(
  row(
    column(
      groupInput(
        id = "text",
        right = buttonInput("clear", icon("times")) \%>\%
          background("red")
      )
    ),
    column(
      verbatimTextOutput("value")
    )
  ) \%>\%
    margin(3)
)

server <- function(input, output) {
  oldValue <- NULL

  output$value <- renderPrint(input$text)

  observeEvent(input$clear, ignoreInit = TRUE, {
    oldValue <<- input$text
    updateValues("text", "")

    showAlert(
      alert("Undo clear.") \%>\%
        background("yellow"),
      action = "undo"
    )
  })

  observeEvent(input$undo, {
    updateValues("text", oldValue)
  })
}

shinyApp(ui, server)
}
}

\section{Removing alerts}{
\preformatted{ui <- container(
  buttonInput("add", "Alert") \%>\%
    margin(3),
  buttonInput("first", "Remove first alert"),
  buttonInput(
    id = "reds",
    label = "Remove red alerts",
    alt = "the red ones offend the aesthetic"
  ),
  buttonInput("alert", "Remove 'Alert' alerts")
)

server <- function(input, output) {
  observeEvent(input$add, {
    color <- sample(c("teal", "purple", "yellow", "red"), 1)
    showAlert(
      alert("Alert") \%>\%
        background(color),
      duration = NULL
    )
  })

  observeEvent(input$first, {
    closeAlert(1)
  })

  observeEvent(input$reds, {
    closeAlert(class = "alert-red")
  })

  observeEvent(input$alert, {
    closeAlert("Alert")
  })
}

shinyApp(ui, server)
}
}

\examples{

### Default alert

alert("Donec at pede.")

### Adding more

alert(
  p("Etiam vel tortor sodales"),
  hr(),
  p("Fusce commodo.") \%>\%
    margin(bottom = 0)
) \%>\%
  background("amber")

}
\seealso{
Other content: \code{\link{blockquote}},
  \code{\link{card}}, \code{\link{d1}},
  \code{\link{dropdown}}, \code{\link{icon}},
  \code{\link{img}}, \code{\link{jumbotron}},
  \code{\link{modal}}, \code{\link{popover}},
  \code{\link{pre}}, \code{\link{progressOutlet}},
  \code{\link{tooltip}}
}
\concept{content}
