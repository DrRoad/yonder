% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/checkbox.R
\name{checkboxInput}
\alias{checkboxInput}
\alias{updateCheckboxInput}
\alias{validateCheckboxInput}
\alias{disableCheckboxInput}
\alias{enableCheckboxInput}
\title{Checkbox inputs}
\usage{
checkboxInput(id, label, value, title = NULL, checked = FALSE, ...)

updateCheckboxInput(id, value, session = getDefaultReactiveDomain())

validateCheckboxInput(id, state, session = getDefaultReactiveDomain())

disableCheckboxInput(id, session = getDefaultReactiveDomain())

enableCheckboxInput(id, session = getDefaultReactiveDomain())
}
\arguments{
\item{id}{A character string specifying the id of the checkbox input, the
reactive value of the checkbox input is available to the shiny server
function as part of the \code{input} object.}

\item{label}{A character string specifying a label for the checkbox.}

\item{value}{A character string, object to coerce to a character string, or
\code{NULL} specifying the value of the checkbox or a new value for the
checkbox.}

\item{checked}{If \code{TRUE} the checkbox renders in a checked state, defaults
to \code{FALSE}.}

\item{...}{Additional named arguments passed as HTML attributes to the parent
element.}

\item{state}{One of \code{"success"}, \code{"warning"}, or \code{"danger"} indicating the
state of the checkbox input. If the return value is \code{NULL} any visual
context is removed.}

\item{header}{A character string specifying a header for the checkbox input,
defaults to \code{NULL}, in which case a header is not added.}
}
\description{
A reactive checkbox input. When a checkbox input is unchecked the reactive
value is \code{NULL}. When checked the checkbox input reactive value is \code{value}.
}
\examples{
if (interactive()) {
  shinyApp(
    ui = container(
      row(
        col(
          checkboxInput(
            id = "checkbox",
            label = "Are you there?",
            value = "yes"
          )
        ),
        col(

        )
      )
    ),
    server = function(input, output) {
      observeEvent(input$checkbox, {
        print(input$checkbox)
      })
    }
  )
}

}
