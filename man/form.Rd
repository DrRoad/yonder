% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/forms.R
\name{form}
\alias{form}
\alias{formGroup}
\alias{updateFormGroup}
\title{Forms}
\usage{
form(..., inline = FALSE)

formGroup(..., state = NULL, fieldset = FALSE, legend = NULL)

updateFormGroup(id, state, session = getDefaultReactiveDomain())
}
\arguments{
\item{...}{Input elements, labels, or other tag elements or named arguments
passed as HTML attributes to the parent element.}

\item{inline}{If \code{TRUE}, the form is rendered inline, inline forms are handy
for rendering small, compact forms, defaults to \code{FALSE}.}

\item{state}{One of \code{"success"}, \code{"warning"}, or \code{"danger"}, specifying the
state of the form group, defaults to \code{NULL} in \code{formGroup}, is required
for \code{updateFormGroup}.}

\item{fieldset}{If \code{TRUE}, the form group is rendered inside a \code{<fieldset>}
instead of a \code{<div>}, defaults to \code{FALSE}. When building a form group
multiple inputs it is recommended to set \code{fieldset} to \code{TRUE} so that
\code{label} properly renders as a \code{<legend>}.}

\item{id}{A character string specifying an id for the form or form group,
defaults to \code{NULL}. If specified a form or form group becomes a reactive
input. A reactive form group will modify its parent form's input.

For \code{updateFormGroup}, a character string specifying the id of a form
group to update.}

\item{session}{The \code{session} object passed to a shiny server function,
defaults to \code{\link[shiny:getDefaultReactiveDomain]{shiny::getDefaultReactiveDomain()}}.}

\item{label}{A character vector specifying a label for the form group, if
\code{fieldset} is \code{TRUE}, the label is rendered inside a \code{<legend>} element
instead of a \code{<label>} element, defaults to \code{NULL}.}
}
\description{
Forms are a new reactive input. A form's reactive value is a list of all the
reactive inputs within it. Reactive form groups, when \code{id} is specified,
within a form cause the form's value to take on a nested structure. See
details for more information.

\code{formGroup} helps visually organization and structure a form. On the
server side, a \code{formGroup} with an \code{id} argument becomes a reactive list
value comprised of its underlying reactive inputs.
}
\details{
** The value of a form **

Below is a small sample form,\preformatted{form(
  id = "register",
  formGroup(
    id = "names",
    textInput(
      id = "first",
      label = "First name"
    ),
    textInput(
      id = "last",
      label = "Last name"
    )
  )
)
}

The initial value of this form, as would be printed from a shiny server
function.\preformatted{input
input$register
input$register$names
input$register$names$first
NULL

input$register$names$last
NULL
}

Here is a longer form based on the one above,\preformatted{form(
  id = "register",
  formGroup(
    id = "names",
    textInput(
      id = "first",
      label = "First name"
    ),
    textInput(
      id = "last",
      label = "Last name"
    )
  ),
  formGroup(
    id = "contact",
    telephoneInput(
      id = "mobile",
      label = "Cell phone"
    ),
    telephoneInput(
      id = "home",
      label = "Home phone"
    )
  )
)
}

Below is the initial value of this larger form,\preformatted{input
input$register
input$register$names
input$register$names$first
NULL

input$register$names$last
NULL

input$register$contact
input$register$contact$mobile
NULL

input$register$contact$home
NULL
}

** Inputs within a form **

Any reactive inputs within a \strong{reactive} form, a form with an \code{id}, will not
trigger an obesrver or reactive expression nor do they take a value other
than \code{NULL}.
}
\examples{
if (interactive()) {
  shinyApp(
    ui = container(
      form(
        id = "user",
        submit = TRUE,
        formGroup(
          id = "names",
          label = "Form group",
          textInput(id = "first", placeholder = "first name"),
          textInput(id = "last", placeholder = "last name")
        )
      )
    ),
    server = function(input, output) {
      observe({
        print(input$user)
      })

      # Note the observer triggers on application startup,
      # value is NULL, and then does not trigger again.
      observe({
        print(input$first)
      })
    }
  )
}

}
\seealso{
For more information on forms and form groups please refer to the online
bootstrap
\href{https://v4-alpha.getbootstrap.com/components/forms/}{reference page}.
}
