% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utilities.R, R/flex.R
\name{flexbox}
\alias{flexbox}
\alias{flexitem}
\alias{flexbox}
\alias{flexitem}
\alias{flexitem}
\title{Flex box and flex item utilities}
\usage{
utils$flexitem(align = NULL, margin = NULL, order = NULL, viewport = NULL)

utils$flexbox(direction = NULL, reverse = FALSE, justify = NULL,
  align = NULL, content = NULL, wrap = NULL, viewport = NULL)

flexbox(..., direction = NULL, reverse = FALSE, justify = NULL,
  align = NULL, content = NULL, wrap = NULL)

flexitem(align = NULL, margin = NULL, order = NULL, viewport = NULL)
}
\arguments{
\item{direction}{One of \code{"row"} or \code{"column"} specifying the direction of a
flex container's items, defaults to \code{"row"}.

Row-wise flex containers handle elements from left to right in rows, the
\emph{main axis is the x-axis}, and the \emph{cross axis is the y-axis}.

Column-wise flex containers handle elements from top to bottom in columns,
the \emph{main axis is y-axis}, and the \emph{cross axis is the x-axis}.}

\item{reverse}{If \code{TRUE}, the ordering of flex items inside a flex container
is reversed \emph{and} the items are aligned to the right side of the container,
defaults to \code{FALSE}. This argument has no effect unless \code{direction} is
specified.}

\item{justify}{One \code{"start"}, \code{"end"}, \code{"center"}, \code{"between"}, or \code{"around"}
specifying how a flex containers items are aligned along the \emph{main axis},
defaults to \code{NULL}. Note that setting \code{justify} to \code{"end"} is not the same
as setting \code{reverse} to \code{TRUE}. Unlike \code{align}, there is no flex item
equivalent of \code{justify}.}

\item{align}{One of \code{"start"}, \code{"end"}, \code{"center"}, \code{"baseline"}, or
\code{"stretch"} specifying how a flex container aligns items or how a flex item
aligns itself within a flex container along the \emph{cross axis}, defaults to
\code{NULL}. Note that, \code{"start"} and \code{"baseline"} are noticeably different only
when the content or font size of flex items are not the same. This is
because baseline aligns items according to the bottom of an item's content.}

\item{content}{One of \code{"start"}, \code{"end"}, \code{"center"}, \code{"between"},
\code{"around"}, or \code{"stretch"}, defaults to \code{NULL}.}

\item{wrap}{One of \code{"nowrap"}, \code{"wrap"}, or \code{"reverse"} specifying how flex
items will wrap inside a flex container, defaults to \code{NULL}. If \code{"nowrap"},
items are condensed so as to fit on a single row or column, possibly
extending past the boundary of the parent flex container. If \code{"wrap"} or
\code{"reverse"}, items are not condensed and will wrap within the parent flex
container onto new rows or columns.}

\item{margin}{One of \code{"left"}, \code{"right"}, \code{"top"}, or \code{"bottom"} specifying
an auto margin for a flex item, defaults to \code{NULL}. On an aligned axis,
a flex item with an auto margin will push away its sibling items. On a
justified axis, a flex item with an auto margin will push itself away from
siblings.}

\item{viewport}{One of \code{"small"}, \code{"medium"}, \code{"large"}, or \code{"extra-large"},
specifying the minimum screen size at which specified styles are applied,
defaults to \code{NULL}. Multiple \code{util$*} calls may be \link{collate}d together to
specify different layouts for element(s) depending on screen size. When
\code{viewport} is \code{NULL} specified styles will apply to the smallest screens on
up. Not all styles have this functionality.}

\item{viewport}{One of \code{"small"}, \code{"medium"}, \code{"large"}, or \code{"extra-large"},
specifying the minimum screen size at which specified flex behavior is
applied, defaults to \code{NULL}.}

\item{direction}{One of \code{"row"} or \code{"column"} specifying the direction of a
flex container's items, defaults to \code{"row"}.

Row-wise flex containers handle elements from left to right in rows, the
\emph{main axis is the x-axis}, and the \emph{cross axis is the y-axis}.

Column-wise flex containers handle elements from top to bottom in columns,
the \emph{main axis is y-axis}, and the \emph{cross axis is the x-axis}.}

\item{reverse}{If \code{TRUE}, the ordering of flex items inside a flex container
is reversed \emph{and} the items are aligned to the right side of the container,
defaults to \code{FALSE}. This argument has no effect unless \code{direction} is
specified.}

\item{justify}{One \code{"start"}, \code{"end"}, \code{"center"}, \code{"between"}, or \code{"around"}
specifying how a flex containers items are aligned along the \emph{main axis},
defaults to \code{NULL}. Note that setting \code{justify} to \code{"end"} is not the same
as setting \code{reverse} to \code{TRUE}. Unlike \code{align}, there is no flex item
equivalent of \code{justify}.}

\item{align}{One of \code{"start"}, \code{"end"}, \code{"center"}, \code{"baseline"}, or
\code{"stretch"} specifying how a flex container aligns items or how a flex item
aligns itself within a flex container along the \emph{cross axis}, defaults to
\code{NULL}. Note that, \code{"start"} and \code{"baseline"} are noticeably different only
when the content or font size of flex items are not the same. This is
because baseline aligns items according to the bottom of an item's content.}

\item{content}{One of \code{"start"}, \code{"end"}, \code{"center"}, \code{"between"},
\code{"around"}, or \code{"stretch"}, defaults to \code{NULL}.}

\item{wrap}{One of \code{"nowrap"}, \code{"wrap"}, or \code{"reverse"} specifying how flex
items will wrap inside a flex container, defaults to \code{NULL}. If \code{"nowrap"},
items are condensed so as to fit on a single row or column, possibly
extending past the boundary of the parent flex container. If \code{"wrap"} or
\code{"reverse"}, items are not condensed and will wrap within the parent flex
container onto new rows or columns.}

\item{margin}{One of \code{"left"}, \code{"right"}, \code{"top"}, or \code{"bottom"} specifying
an auto margin for a flex item, defaults to \code{NULL}. On an aligned axis,
a flex item with an auto margin will push away its sibling items. On a
justified axis, a flex item with an auto margin will push itself away from
siblings.}
}
\description{
These utility functions are used to build flex layouts and are viewport
responsive.

Convert tags into flex boxes and flex items. These functions may be chained
together to specify different flex behavior for different viewports.
Multi length arguments may be passed to flexbox and flexitem. The name
of each argument should be one of \code{small}, \code{sm}, \code{medium}, \code{md}, \code{large},
\code{lg}, \code{extra-large}, \code{lg} or blank (\code{extra-small}) indicating a viewport
size at which to apply the flex behavior.
}
\section{How it all works}{


\strong{reverse}

Flex container with \code{reverse = FALSE}.
\itemize{
\item \code{| Item 1 | Item 2 | Item 3 | ============= |}
}

Flex container with \code{reverse = TRUE}
\itemize{
\item \code{| ============= | Item 3 | Item 2 | Item 1 |}
}

\strong{justify}

Flex container with \code{justify = "start"}
\itemize{
\item \code{| Item 1 | Item 2 | Item 3 | ============= |}
}

Flex container with \code{justify = "end"}
\itemize{
\item \code{| ============= | Item 1 | Item 2 | Item 3 |}
}

Flex container with \code{justify = "center"}
\itemize{
\item \code{| ===== | Item 1 | Item 2 | Item 3 | ===== |}
}

Flex container with \code{justify = "between"}
\itemize{
\item \code{| Item 1 | ===== | Item 2 | ===== | Item 3 |}
}

Flex container with \code{justify = "around"}
\itemize{
\item \code{| = | Item 1 | = | Item 2 | = | Item 3 | = |}
}

\strong{align} (flexbox)

Parent flex container with \code{align = "start"}

\itemize{
\item\preformatted{| Item 1 | Item 2 | Item 3 | ============= |
|        |        |        |               |
|        |        |        |               |
}

}

Parent flex container with \code{align = "end"}

\itemize{
\item\preformatted{|        |        |        |               |
|        |        |        |               |
| Item 1 | Item 2 | Item 3 | ============= |
}

}

Parent flex container with \code{align = "center"}

\itemize{
\item\preformatted{|        |        |        |               |
| Item 1 | Item 2 | Item 3 | ============= |
|        |        |        |               |
}

}

Parent flex container with \code{align = "baseline"}

\itemize{
\item\preformatted{| Item 1 | Item 2 | Item 3 | ============= |
|        |        |        |               |
|        |        |        |               |
}

}

Parent flex container with \code{align = "stretch"}

\itemize{
\item\preformatted{| It     | It     | It     | ============= |
|   em   |   em   |   em   |               |
|      1 |      2 |      3 |               |
}

}

\strong{align} (flexitem)

Parent flex container with \code{align = "stretch"}, child \code{Item 2} with \code{align = "start"}

\itemize{
\item\preformatted{| It     | Item 2 | It     | ============= |
|   em   |        |   em   |               |
|      1 |        |      3 |               |
}

}

Parent flex container with \code{align = "stretch"}, child \code{Item 2} with \code{align = "end"}

\itemize{
\item\preformatted{| It     |        | It     | ============= |
|   em   |        |   em   |               |
|      1 | Item 2 |      3 |               |
}

}

Parent flex container with \code{align = "stretch"}, child \code{Item 2} with \code{align = "center"}

\itemize{
\item\preformatted{| It     |        | It     | ============= |
|   em   |        |   em   |               |
|      1 | Item 2 |      3 |               |
}

}

Parent flex container with \code{align = "stretch"}, child \code{Item 2} with \code{align = "baseline"}

\itemize{
\item\preformatted{| It     | Item 2 | It     | ============= |
|   em   |        |   em   |               |
|      1 |        |      3 |               |
}

}

Parent flex container with \code{align = "stretch"}, child \code{Item 2} with \code{align = "stretch"}

\itemize{
\item\preformatted{| It     | It     | It     | ============= |
|   em   |   em   |   em   |               |
|      1 |      2 |      3 |               |
}

}

\strong{margin}

Parent flex container with \code{justify = "end"}, child \code{Item 1} with \code{margin = "right"} pushes self away from siblings
\itemize{
\item \code{| Item 1 | ============= | Item 2 | Item 3 |}
}

Parent flex container with \code{align = "start"}, child \code{Item 1} with \code{margin = "right"} pushes siblings away from self
\itemize{
\item \code{| Item 1 | ============= | Item 2 | Item 3 |}
}

Parent flex container with \code{justify = "start"}, child \code{Item 3} with \code{margin = "left"} pushes self away from siblings
\itemize{
\item \code{| Item 1 | Item 2 | ============= | Item 3 |}
}

Parent flex container with \code{align = "end"}, child \code{Item 1} with \code{margin = "left"} pushes siblings away from self
\itemize{
\item \code{| Item 1 | Item 2 | ============= | Item 3 |}
}

\strong{wrap}

Parent flex container with \code{wrap = "nowrap"}

\itemize{
\item\preformatted{| Item | Item | Item | Item | Item | Item |
| 1    | 2    | 3    | 4    | 5    | 6    |
}

}

Parent flex container with \code{wrap = "wrap"}

\itemize{
\item\preformatted{| Item 1 | Item 2 | Item 3 | Item 4 | === |
| Item 5 | Item 6 |                       |
}

}

Parent flex container with \code{wrap = "reverse"}

\itemize{
\item\preformatted{| Item 5 | Item 6 |                       |
| Item 1 | Item 2 | Item 3 | Item 4 | === |
}

}
}

\section{Better understanding flex behavior}{


\strong{reverse}

Flex container with \code{reverse = FALSE}.
\itemize{
\item \code{| Item 1 | Item 2 | Item 3 | ============= |}
}

Flex container with \code{reverse = TRUE}
\itemize{
\item \code{| ============= | Item 3 | Item 2 | Item 1 |}
}

\strong{justify}

Flex container with \code{justify = "start"}
\itemize{
\item \code{| Item 1 | Item 2 | Item 3 | ============= |}
}

Flex container with \code{justify = "end"}
\itemize{
\item \code{| ============= | Item 1 | Item 2 | Item 3 |}
}

Flex container with \code{justify = "center"}
\itemize{
\item \code{| ===== | Item 1 | Item 2 | Item 3 | ===== |}
}

Flex container with \code{justify = "between"}
\itemize{
\item \code{| Item 1 | ===== | Item 2 | ===== | Item 3 |}
}

Flex container with \code{justify = "around"}
\itemize{
\item \code{| = | Item 1 | = | Item 2 | = | Item 3 | = |}
}

\strong{align} (flexbox)

Parent flex container with \code{align = "start"}

\itemize{
\item\preformatted{| Item 1 | Item 2 | Item 3 | ============= |
|        |        |        |               |
|        |        |        |               |
}

}

Parent flex container with \code{align = "end"}

\itemize{
\item\preformatted{|        |        |        |               |
|        |        |        |               |
| Item 1 | Item 2 | Item 3 | ============= |
}

}

Parent flex container with \code{align = "center"}

\itemize{
\item\preformatted{|        |        |        |               |
| Item 1 | Item 2 | Item 3 | ============= |
|        |        |        |               |
}

}

Parent flex container with \code{align = "baseline"}

\itemize{
\item\preformatted{| Item 1 | Item 2 | Item 3 | ============= |
|        |        |        |               |
|        |        |        |               |
}

}

Parent flex container with \code{align = "stretch"}

\itemize{
\item\preformatted{| It     | It     | It     | ============= |
|   em   |   em   |   em   |               |
|      1 |      2 |      3 |               |
}

}

\strong{align} (flexitem)

Parent flex container with \code{align = "stretch"}, child \code{Item 2} with \code{align = "start"}

\itemize{
\item\preformatted{| It     | Item 2 | It     | ============= |
|   em   |        |   em   |               |
|      1 |        |      3 |               |
}

}

Parent flex container with \code{align = "stretch"}, child \code{Item 2} with \code{align = "end"}

\itemize{
\item\preformatted{| It     |        | It     | ============= |
|   em   |        |   em   |               |
|      1 | Item 2 |      3 |               |
}

}

Parent flex container with \code{align = "stretch"}, child \code{Item 2} with \code{align = "center"}

\itemize{
\item\preformatted{| It     |        | It     | ============= |
|   em   |        |   em   |               |
|      1 | Item 2 |      3 |               |
}

}

Parent flex container with \code{align = "stretch"}, child \code{Item 2} with \code{align = "baseline"}

\itemize{
\item\preformatted{| It     | Item 2 | It     | ============= |
|   em   |        |   em   |               |
|      1 |        |      3 |               |
}

}

Parent flex container with \code{align = "stretch"}, child \code{Item 2} with \code{align = "stretch"}

\itemize{
\item\preformatted{| It     | It     | It     | ============= |
|   em   |   em   |   em   |               |
|      1 |      2 |      3 |               |
}

}

\strong{margin}

Parent flex container with \code{justify = "end"}, child \code{Item 1} with \code{margin = "right"} pushes self away from siblings
\itemize{
\item \code{| Item 1 | ============= | Item 2 | Item 3 |}
}

Parent flex container with \code{align = "start"}, child \code{Item 1} with \code{margin = "right"} pushes siblings away from self
\itemize{
\item \code{| Item 1 | ============= | Item 2 | Item 3 |}
}

Parent flex container with \code{justify = "start"}, child \code{Item 3} with \code{margin = "left"} pushes self away from siblings
\itemize{
\item \code{| Item 1 | Item 2 | ============= | Item 3 |}
}

Parent flex container with \code{align = "end"}, child \code{Item 1} with \code{margin = "left"} pushes siblings away from self
\itemize{
\item \code{| Item 1 | Item 2 | ============= | Item 3 |}
}

\strong{wrap}

Parent flex container with \code{wrap = "nowrap"}

\itemize{
\item\preformatted{| Item | Item | Item | Item | Item | Item |
| 1    | 2    | 3    | 4    | 5    | 6    |
}

}

Parent flex container with \code{wrap = "wrap"}

\itemize{
\item\preformatted{| Item 1 | Item 2 | Item 3 | Item 4 | === |
| Item 5 | Item 6 |                       |
}

}

Parent flex container with \code{wrap = "reverse"}

\itemize{
\item\preformatted{| Item 5 | Item 6 |                       |
| Item 1 | Item 2 | Item 3 | Item 4 | === |
}

}
}

\examples{

# stub

if (interactive()) {
  shinyApp(
    ui = container(

    ),
    server = function(input, output) {

    }
  )
}

}
\seealso{
Other utilities: \code{\link{colors}}, \code{\link{float}},
  \code{\link{hidden}}, \code{\link{position}},
  \code{\link{sizing}}, \code{\link{spacing}},
  \code{\link{viewport}}
}
