% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/list-group.R
\name{listGroupInput}
\alias{listGroupInput}
\alias{updateListGroupInput}
\alias{disableListGroupInput}
\alias{enableListGroupInput}
\alias{incrementListGroupInput}
\title{List group inputs}
\usage{
listGroupInput(id, items, values = items, selected = NULL,
  disabled = NULL, badges = NULL, context = NULL, ...)

updateListGroupInput(id, items, values = items, selected = NULL,
  disabled = NULL, session = getDefaultReactiveDomain())

disableListGroupInput(id, disabled = NULL,
  session = getDefaultReactiveDomain())

enableListGroupInput(id, enabled = NULL,
  session = getDefaultReactiveDomain())

incrementListGroupInput(id, increment = NULL,
  session = getDefaultReactiveDomain())
}
\arguments{
\item{id}{A character string specifying the id of the list group input, the
reactive value of the list group input is available to the shiny server
function as part of the \code{input} object. When creating a list group to
only display information pass \code{NULL} as the \code{id}, in this case an id is not
added and a reactive input is not created.}

\item{items}{A character vector or list of character strings specifying the
text of the list group items, defaults to \code{items}.}

\item{values}{A character string or list of character strings specifying the
values of the list group items.}

\item{selected}{One or more of \code{values} indicating the default list group
items selected, defaults to \code{NULL}, in which case no items are selected and
the default value of the list group input is \code{NULL}.}

\item{disabled, enabled}{One or more of \code{values} indicating which list group
items to disable or enable, defaults to \code{NULL}. If \code{NULL} then
\code{disableListGroup} and \code{enableListGroup} will disable or enable all the
list group items, respectively.}

\item{badges}{A list of \code{\link{badgeOutput}}s added to the list group's items,
defaults to \code{NULL}. See \code{badgeOutput} for more information on rendering
badges.}

\item{context}{One of \code{"primary"}, \code{"secondary"}, \code{"success"}, \code{"info"},
\code{"warning"}, \code{"danger"}, \code{"light"}, \code{"dark"} or \code{NULL} specifying the
visual context of the list group input, defaults to \code{NULL}, in which case
a visual context is not applied.}

\item{...}{Additional named arguments passed as HTML attributes to the parent
element.}

\item{increment}{One or more of \code{values} indicating which list group items to
increment, defaults to \code{NULL}. If \code{NULL} then all list group items are
incremented. If the list group items do not include badges there is no
effect.}

\item{state}{One of \code{"valid"}, \code{"warning"}, or \code{"danger"} indicating the
state of the list group items. If \code{"valid"} then the visual context is
removed.}

\item{validate}{One or more of \code{values} indicating which list group items
to mark with \code{state}, defaults to \code{NULL}. If \code{NULL} then the all list group
items are updated.}
}
\description{
A way of handling and outlining content as a list. List groups function
similarly to checkbox groups. A list group returns a reactive vector of the
values from its active (selected) list group items. List group items are
selected or unselected by clicking on them. While list groups may be used as
reactive inputs they may also be used to simply display content, in which
case do not specify a list group id.
}
\examples{
if (interactive()) {
  shinyApp(
    ui = container(
      row(
        col(
          listGroupInput(
            id = "listgroup",
            items = paste("Item", 1:5),
            values = 1:5,
            selected = 2
          )
        ),
        col(
          textOutput("selected")
        )
      )
    ),
    server = function(input, output) {
      output$selected <- renderText({
        paste0(input$listgroup, collapse = ", ")
      })
    }
  )
}

if (interactive()) {
  shinyApp(
    ui = container(
      row(
        col(
          listGroupInput(
            id = "sets",
            items = c(
              "red, blue, yellow",
              "silver, gold, crystal",
              "sapphire, ruby, emerald"
            )
          )
        ),
        col(
          listGroupInput(
            id = "stub",
            items = NULL
          )
        )
      )
    ),
    server = function(input, output) {
      observe({
        updateListGroupInput("stub", input$sets)
      })
    }
  )
}

if (interactive()) {
  shinyApp(
    ui = container(
      row(
        col(
          width = 2,
          buttonInput(
            id = "enable",
            label = "Enable",
            block = TRUE
          )
        ),
        col(
          row(
            col(
              listGroupInput(
                id = "listgroup",
                items = c(
                  "One fish", "Two fish",
                  "Red fish", "Blue fish"
                )
              )
            ),
            col(
              d4(
                textOutput("value")
              )
            )
          )
        ),
        col(
          width = 2,
          buttonInput(
            id = "disable",
            label = "Disable",
            block = TRUE
          )
        )
      )
    ),
    server = function(input, output) {
      observeEvent(input$enable, {
        enableListGroupInput("listgroup")
      })

      observeEvent(input$disable, {
        disableListGroupInput("listgroup")
      })

      output$value <- renderText({
        paste0(input$listgroup, collapse = ", ")
      })
    }
  )
}

}
\seealso{
Boostrap 4 list group documentation:
\url{https://getbootstrap.com/docs/4.0/components/list-group/}
}
