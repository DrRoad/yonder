% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/group.R
\name{groupInput}
\alias{groupInput}
\title{Group inputs, combination button, dropdown, and text input}
\usage{
groupInput(id, placeholder = NULL, value = NULL, left = NULL,
  right = NULL, ...)
}
\arguments{
\item{id}{A character string specifying the id of the group input.}

\item{placeholder}{A character string specifying placeholder text for the
input group, defaults to \code{NULL}.}

\item{value}{A character string specifying an initial value for the input
group, defaults to \code{NULL}.}

\item{left, right}{A character vector specifying static addons or
\code{\link[=buttonInput]{buttonInput()}} or \code{\link[=dropdownInput]{dropdownInput()}} elements specifying dynamic addons.
Addon's affect the reactive value of the group input, see the Details
section below for more information.}

\item{...}{Additional named arguments passed as HTML attributes to the
parent element.}
}
\description{
A group input is a combination reactive input which may consist of one or two
buttons, dropdowns, static addons, or any combination of these elements.
Static addons, specified with \code{left} and \code{right} may be used to ensure an
group input's reactive value always has a certain prefix or suffix. These
static addons render with a shaded background to help indicated this behavior to the user.
Buttons and dropdowns may be included to control when the group input's
reactive value updates. See Details for more information.
}
\details{
\strong{\code{left} is character or \code{right} is character}

If \code{left} or \code{right} are character vectors, then the group input functions
like a text input. The value will update and trigger a reactive event when
the text box is modified. The group input's reactive value is the
concatention of the static addons specified by \code{left} or \code{right} and the
value of the text input.

\strong{\code{left} is button or \code{right} is button}

The button does not change the value of the group input. However, the input
no longer triggers event when the text box is updated. Instead the value
is updated when a button is clicked. Static addons are still applied to the
group input value.

\strong{\code{left} is a dropdown or \code{right} is a dropdown}

The value of the group input does chance depending on the clicked dropdown
menu item. The value of the input group is the concatentation of the
dropdown input value, the value of the text input, and any static addons.
}
\examples{
if (interactive()) {
  shinyApp(
    ui = container(
      row(
        col(
          groupInput(
            id = "buttongroup",
            left = "@",
            placeholder = "Username"
          )
        ),
        col(
          d4(
            textOutput("value")
          )
        )
      )
    ),
    server = function(input, output) {
      output$value <- renderText({
        input$buttongroup
      })
    }
  )
}

if (interactive()) {
  shinyApp(
    ui = container(
      row(
        col(
          groupInput(
            id = "groupinput",
            placeholder = "Search terms",
            right = buttonInput(
              id = "button",
              label = "Go!"
            )
          )
        ),
        col(
          d4(
            textOutput("value")
          )
        )
      )
    ),
    server = function(input, output) {
      output$value <- renderText({
        input$groupinput
      })
    }
  )
}

if (interactive()) {
  shinyApp(
    ui = container(
      row(
        col(
          groupInput(
            id = "groupinput",
            left = c("$", "0.")
          )
        ),
        col(
          d4(
            textOutput("value")
          )
        )
      )
    ),
    server = function(input, output) {
      output$value <- renderText({
        input$groupinput
      })
    }
  )
}

if (interactive()) {
  shinyApp(
    ui = container(
      row(
        col(
          groupInput(
            id = "groupinput",
            left = "@",
            placeholder = "Username",
            right = buttonInput(
              id = "right",
              label = "Search"
            ) \%>\%
              background("white") \%>\%
              border("blue")
          )
        ),
        col(
          d4(
            textOutput("value")
          )
        )
      )
    ),
    server = function(input, output) {
      output$value <- renderText({
        input$groupinput
      })
    }
  )
}

}
\seealso{
Other inputs: \code{\link{buttonGroupInput}},
  \code{\link{buttonInput}}, \code{\link{checkboxInput}},
  \code{\link{dateInput}}, \code{\link{formInput}},
  \code{\link{radioInput}}, \code{\link{selectInput}},
  \code{\link{textInput}}
}
\concept{inputs}
