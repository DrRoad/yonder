% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/radio.R
\name{radioInput}
\alias{radioInput}
\alias{updateRadioInput}
\alias{disableRadioInput}
\alias{enableRadioInput}
\title{Radio inputs}
\usage{
radioInput(id, choices, values = choices, selected = NULL,
  disabled = NULL, help = NULL, inline = FALSE)

updateRadioInput(id, choices, values = choices, selected = NULL,
  disabled = NULL, session = getDefaultReactiveDomain())

disableRadioInput(id, disabled = NULL, session = getDefaultReactiveDomain())

enableRadioInput(id, enabled = NULL, session = getDefaultReactiveDomain())
}
\arguments{
\item{id}{A character string specifying the id of the radio input, the
reactive value of the radio input is available to the shiny server
function as part of the \code{input} object.}

\item{choices}{A character vector specifying labels for the radio input's
choices.}

\item{values}{A character vector, list of character strings, vector of values
to coerce to character strings, or list of values to coerce to character
strings specifying the values of the radio input's choices, defaults to
\code{choices}.}

\item{selected}{One of \code{values} indicating the default selected value of the
radio input, defaults to \code{NULL}, in which case the first choice is
selected by default.}

\item{disabled, enabled}{One or more of \code{values} indicating which radio
choices to disable or enable, defaults to \code{NULL}. If \code{NULL} then
\code{disableRadioInput} and \code{enableRadioInput} will disable or enable all
the radio input's choices, respectively.}

\item{help}{A character string specifying a small help label which appears
below the input, defaults to \code{NULL} in which case help text is not added.}

\item{inline}{If \code{TRUE}, the radio input renders inline, defaults to \code{FALSE},
in which case the radio controls render on separate lines.}

\item{...}{Additional named arguments passed as HTML attributes to the parent
element.}
}
\description{
Create a reactive radio input of one or more radio controls.
}
\examples{
if (interactive()) {
  shinyApp(
    ui = container(
      row(
        col(
          radioInput(
            id = "radio",
            choices = c(
              "(A) Ice cream",
              "(B) Pumpkin pie",
              "(C) 3 turtle doves",
              "(D) (A) and (C)",
              "(E) All of the above"
            ),
            values = LETTERS[1:5]
          )
        ),
        col(
          d4(
            textOutput("selected")
          )
        )
      )
    ),
    server = function(input, output) {
      output$selected <- renderText({
        input$radio
      })
    }
  )
}

if (interactive()) {
  shinyApp(
    ui = container(
      row(
        col(
          tags$h2("Stacked"),
          radioInput(
            id = "groups",
            choices = c("le guin", "rothfuss", "traviss"),
            values = c(
              "rocannon, exile, illusion",
              "wind, fear",
              "contact, zero, colors"
            )
          )
        ),
        col(
          tags$h2("Inline"),
          radioInput(
            id = "choices",
            choices = NULL,
            inline = TRUE
          )
        )
      )
    ),
    server = function(input, output) {
      observe({
        updateRadioInput(
          id = "choices",
          choices = strsplit(input$groups, ", ", fixed = TRUE)[[1]]
        )
      })
    }
  )
}

if (interactive()) {
  shinyApp(
    ui = container(
      row(
        col(
          tags$h2("Disable inputs"),
          radioInput(
            id = "disabled",
            choices = c("one & three", "two", "two & three")
          )
        ),
        col(
          tags$h2("The inputs"),
          radioInput(
            id = "other",
            choices = c("one", "two", "three")
          )
        ),
        col(
          tags$h2("Input value"),
          textOutput("value")
        )
      )
    ),
    server = function(input, output) {
      observe({
        req(input$disabled)

        disableRadioInput(
          id = "other",
          disabled = switch(
            input$disabled,
            `one & three` = c("one", "three"),
            `two` = "two",
            `two & three` = c("two", "three")
          )
        )
      })

      observe({
        req(input$disabled)

        enableRadioInput(
          id = "other",
          enabled = switch(
            input$disabled,
            `one & three` = "two",
            `two` = c("one", "three"),
            `two & three` = "one"
          )
        )
      })

      output$value <- renderText({
        if (is.null(input$other)) {
          "<NULL>"
        } else {
          input$other
        }
      })
    }
  )
}

}
\seealso{
Other inputs: \code{\link{buttonInput}},
  \code{\link{checkboxInput}}, \code{\link{formInput}},
  \code{\link{groupInput}}, \code{\link{selectInput}},
  \code{\link{textInput}}
}
