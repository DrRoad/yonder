% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/table.R
\name{tableThruput}
\alias{tableThruput}
\alias{renderTable}
\title{Table thruput}
\usage{
tableThruput(id, borders = FALSE, compact = FALSE, ...)

renderTable(expr, env = parent.frame(), quoted = FALSE)
}
\arguments{
\item{id}{A character string specifying the id of the table thruput.}

\item{borders}{If \code{TRUE}, the table renders with cell borders, defaults to
\code{FALSE}.}

\item{compact}{If \code{TRUE}, table cell padding is cut in half to reduce the
size of the table, defaults to \code{FALSE}.}

\item{...}{Additional named arguments passed as HTML attributes to the parent
element.}

\item{expr}{An expression which returns a data frame or \code{NULL}. If data frame
the table thruput is re-rendered, otherwise if \code{NULL} the current table
thruput is left as is.}

\item{quoted}{If \code{TRUE}, then \code{expr} is treated as a quoted expression,
defaults to \code{FALSE}.}

\item{context}{One \code{"success"}, \code{"info"}, \code{"warning"}, \code{"danger"}, specifying
the context of selected table rows, defaults to \code{NULL}, in which case
selected rows are highlighted in grey.}

\item{state}{One of \code{"valid"}, \code{"primary"}, \code{"secondary"}, \code{"success"},
\code{"info"}, \code{"warning"}, or \code{"danger"} indicating the state of the table row.
If \code{"valid"} then the visual context is removed.}

\item{validate}{A numeric vector of row numbers indicating which}

\item{session}{A \code{session} object passed to the shiny server function,
defaults to \code{\link[=getDefaultReactiveDomain]{getDefaultReactiveDomain()}}.}
}
\description{
Render a table. Thruputs are a new reactive object.
}
\examples{
if (interactive()) {
  shinyApp(
    ui = container(
      row(
        col(
          tableThruput(
            id = "table",
            context = "danger"
          )
        ),
        col(
          verbatimTextOutput("value")
        )
      )
    ),
    server = function(input, output) {
      output$table <- renderTable({
        iris[1:10, ]
      })

      output$value <- renderPrint({
        input$table
      })
    }
  )
}

if (interactive()) {
  shinyApp(
    ui = container(
      row(
        col(
          tableThruput(
            id = "tbl",
            borders = TRUE
          )
        ),
        col(
          tableThruput(
            id = "subset",
            borders = TRUE
          )
        )
      )
    ),
    server = function(input, output) {
      output$tbl <- renderTable({
        iris[1:10, ]
      })

      output$subset <- renderTable({
        input$tbl
      })
    }
  )
}


}
