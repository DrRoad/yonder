% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/table.R
\name{tableThruput}
\alias{tableThruput}
\alias{renderTable}
\title{Table thruput}
\usage{
tableThruput(id, borders = FALSE, compact = FALSE, ...)

renderTable(expr, env = parent.frame(), quoted = FALSE)
}
\arguments{
\item{id}{A character string specifying the id of the table thruput.}

\item{borders}{One of \code{TRUE} or \code{FALSE} specifying if the table renders with
cell borders, defaults to \code{FALSE}.}

\item{compact}{One of \code{TRUE} or \code{FALSE} specifying if the table cells are
rendered with less space, defaults to \code{FALSE}.}

\item{...}{Additional named arguments passed as HTML attributes to the parent
element.}

\item{expr}{An expression which returns a data frame or \code{NULL}. If a data
frame is returned the table thruput is re-rendered, otherwise if \code{NULL} the
current table is left as is.}

\item{env}{The environment in which to evaluate \code{expr}, defaults to
\code{parent.frame()}.}

\item{quoted}{One of \code{TRUE} or \code{FALSE} specifying if \code{expr} is a quoted
expression.}
}
\description{
Render a table. Thruputs are a new reactive object.
}
\examples{
if (interactive()) {
  shinyApp(
    ui = container(
      row(
        column(
          tableThruput(
            id = "table"
          )
        ),
        column(
          verbatimTextOutput("value")
        )
      )
    ),
    server = function(input, output) {
      output$table <- renderTable({
        iris[1:10, ]
      })

      output$value <- renderPrint({
        input$table
      })
    }
  )
}

if (interactive()) {
  shinyApp(
    ui = container(
      row(
        column(
          tableThruput(
            id = "table",
            borders = TRUE
          )
        ),
        column(
          tableThruput(
            id = "subset",
            borders = TRUE
          )
        )
      )
    ),
    server = function(input, output) {
      output$table <- renderTable({
        mtcars[1:10, ]
      })

      output$subset <- renderTable({
        input$table
      })
    }
  )
}

}
