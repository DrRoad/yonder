% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/table.R
\name{tableThruput}
\alias{tableThruput}
\alias{renderTable}
\title{Table thruput}
\usage{
tableThruput(id, ..., borders = "rows", striped = FALSE,
  compact = FALSE, responsive = FALSE, editable = FALSE)

renderTable(expr, env = parent.frame(), quoted = FALSE)
}
\arguments{
\item{id}{A character string specifying the id of the reactive input.}

\item{...}{Additional named arguments passed as HTML attributes to the parent
element.}

\item{borders}{One of \code{"rows"}, \code{"all"}, or \code{"none"} specifying what borders
are applied to the table, defaults to \code{"rows"}. \code{"rows"} will apply borders
between table rows. \code{"all"} will apply borders between table rows and
columns. \code{"none"} removes all borders from the table.}

\item{striped}{One \code{TRUE} or \code{FALSE} specifying if the table rows alternate
between light and darker backgrounds.}

\item{compact}{One of \code{TRUE} or \code{FALSE} specifying if the table cells are
rendered with less space, defaults to \code{FALSE}.}

\item{responsive}{One of \code{TRUE} or \code{FALSE} specifying if the table is allowed
to scroll horizontally, default to \code{FALSE}. This is useful when fitting
wide tables onto small viewports.}

\item{editable}{One of \code{TRUE} or \code{FALSE} specifying if the user can edit
table cells, defaults to \code{FALSE}.}

\item{expr}{An expression which returns a data frame or \code{NULL}. If a data
frame is returned the table thruput is re-rendered, otherwise if \code{NULL} the
current table is left as is.}

\item{env}{The environment in which to evaluate \code{expr}, defaults to
\code{parent.frame()}.}

\item{quoted}{One of \code{TRUE} or \code{FALSE} specifying if \code{expr} is a quoted
expression.}
}
\description{
Use \code{tableThruput()} to create a table output you can update with
\code{renderTable()}. Access selected table columns by referencing the same
table id as an input.
}
\section{Example application}{
\preformatted{shinyApp(
  ui = container(
    tableThruput(id = "tableExample", responsive = TRUE)
  ),
  server = function(input, output) {
    output$tableExample <- renderTable({
      iris
    })
  }
)
}
}

\examples{

### Responsive tables

# In practice you will use `renderTable()` to update the data in a table.
# These live examples have been populated automatically for the sake of
# the demo.

% <script>
% $(function() {
%   $(".yonder-table").each(function() {
%     $(this).table({ data: iris });
%   });
% });
% </script>

tableThruput(
  id = "table1",  # <-
  responsive = TRUE
)

### Borders on rows and columns

tableThruput(
  id = "table2",
  borders = "all",  # <-
  responsive = TRUE
)

### Edit table values

tableThruput(
  id = "table3",
  editable = TRUE,  # <-
  responsive = TRUE
)

}
\concept{thruputs}
