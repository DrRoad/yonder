% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/progress.R
\name{progressOutput}
\alias{progressOutput}
\alias{bar}
\alias{sendBar}
\title{Progress bars}
\usage{
progressOutput(...)

bar(id, value, label = NULL, striped = FALSE, ...)

sendBar(id, value, label = NULL, session = getDefaultReactiveDomain())
}
\arguments{
\item{...}{One or more \code{bar} elements passed to a progress output or named
arguments passed as HTML attributes to the parent element.}

\item{id}{A character string specifying the HTML id of a progress output.}

\item{value}{An integer between 0 and 100 specifying the initial value
of a bar.}

\item{label}{A character string specifying the label of a bar, defaults to
\code{NULL}, in which case a label is not added.}

\item{striped}{If \code{TRUE}, the progress bar has a striped gradient, defaults
to \code{FALSE}.}

\item{session}{A reactive context, defaults to \code{\link[=getDefaultReactiveDomain]{getDefaultReactiveDomain()}}.}
}
\description{
Create simple or composite progress bars. To create a composite progress bar
pass multiple calls to \code{bar} to a progress output. Each \code{bar} component has
its own id, value, label, and attributes. Furthermore, utility functions may
be applied to individual bars for added customization.
}
\examples{
if (interactive()) {
  shinyApp(
    ui = container(
      row(
        column(
          buttonInput(id = "inc", "Increment progress")
        ),
        column(
          progressOutput(
            bar("clicks", 0, striped = TRUE) \%>\%
              background("blue")
          )
        )
      )
    ),
    server = function(input, output) {
      observeEvent(input$inc, {
        sendBar(
          id = "clicks",
          value = min(input$inc / 20 * 100, 100)
        )
      })
    }
  )
}

if (interactive()) {
  shinyApp(
    ui = container(
      row(
        column(
          progressOutput(
            bar(id = "faster", value = 0) \%>\%
              background("yellow"),
            bar(id = "slower", value = 0)
          )
        )
      )
    ),
    server = function(input, output) {
      observe({
        for (i in seq(from = 0, to = 50, by = 1)) {
          sendBar(
            id = "slower",
            value = i
          )

          sendBar(
            id = "faster",
            value = min(i * 3, 50)
          )

          Sys.sleep(0.1)
        }
      })
    }
  )
}

}
\seealso{
Other outputs: \code{\link{sparklineOutput}},
  \code{\link{streamOutput}}
}
\concept{outputs}
