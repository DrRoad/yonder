#!/usr/bin/env node

/*!
 * Build js and scss
 */

let parser = require('commander');
let sass = require('node-sass');
let babel = require('babel-core');
let fs = require('fs');
let path = require('path');
let glob = require('glob');
let concat = require('concat');

parser.version('0.0.1');

parser
  .command('scss')
  .description('compile and uglify scss')
  .action(() => {
    let render = (path, style = 'nested') => {
      sass.render({
        file: 'src/scss/main.scss',
        outFile: path,
        outputStyle: style
      }, (err, res) => {
        if (!err) {
          fs.writeFile(path, res.css, (err) => {
            if (!err) {
              console.log('✔  wrote ' + path);
            } else {
              console.log('X ' + err);
            }
          });
        } else {
          console.log(path.relative('.', err.file))
          console.log('(' + err.line + ',' + err.column + ')\t' + err.message);
        }
      });
    }

    render('lib/css/dull.css');
    render('lib/css/dull.min.css', 'compressed');
  });

parser
  .command('js')
  .description('transform and minify js')
  .action(() => {
    glob('src/js/**/*.js', (err, files) => {
      if (err) throw err;

      concat(files, 'lib/js/dull.js');
      console.log('✔  wrote lib/js/dull.js');

      let opts = {
        compact: true,
        minified: true,
        shouldPrintComment: (contents) => {
          return contents ? contents.charAt(0) === '!' : false;
        }
      };

      babel.transformFile('lib/js/dull.js', opts, (err, res) => {
        if (err) throw err;

        fs.writeFile('lib/js/dull.min.js', res.code, (err) => {
          if (err) throw err;

          console.log('✔  wrote lib/js/dull.min.js');
        });
      });
    });
  });

parser.parse(process.argv);
